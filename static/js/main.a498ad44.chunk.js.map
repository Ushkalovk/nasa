{"version":3,"sources":["components/DateComponent.js","components/ImageComponent.js","components/Insta.js","App.js","serviceWorker.js","index.js"],"names":["DateComponent","onChange","value","props","dateMethod","className","this","Date","maxDate","React","Component","ImageComponent","type","title","src","url","alt","explanation","width","height","frameBorder","allow","allowFullScreen","Insta","state","urls","add","arr","push","setState","alert","onClick","map","item","i","key","API_KEY","App","undefined","date","outdate","code","gettingDate","a","options","year","month","day","weekday","toLocaleString","gettingImage","e","preventDefault","newdate","getFullYear","getMonth","getDate","fetch","headers","api_url","json","data","console","log","error","media_type","sessionStorage","setItem","getItem","id","imageMethod","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a498ad44.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nclass DateComponent extends React.Component {\r\n\r\n    onChange = (value) => {this.props.dateMethod(value) };\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"calend\">\r\n                <Calendar\r\n                onChange={this.onChange}\r\n                value={new Date()}\r\n                maxDate={new Date()}\r\n                className=\"container calend\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateComponent;","import React from \"react\";\r\n\r\nclass ImageComponent extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.type === \"image\" &&\r\n                    <div>\r\n                        <div className=\"mt-2\">\r\n                            <h1>{this.props.title}</h1>\r\n                        </div>\r\n                        <div>\r\n                            <img className=\"img-fluid\" src={this.props.url} alt=\"\"/>\r\n                        </div>\r\n                        <div className=\"mt-2\">\r\n                            <h3>{this.props.explanation}</h3>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {this.props.type === \"video\" &&\r\n\r\n                <div>\r\n                    <div className=\"mt-2\">\r\n                        <h1>{this.props.title}</h1>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"embed-responsive embed-responsive-16by9\">\r\n                            <iframe className=\"embed-responsive-item\" title=\"Video\" width=\"560\" height=\"315\" src={this.props.url} frameBorder=\"0\"\r\n                                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                                    allowFullScreen/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mt-2\">\r\n                        <h3 className=\"\">{this.props.explanation}</h3>\r\n                    </div>\r\n                </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageComponent;","import React from \"react\";\r\n\r\nclass Insta extends React.Component {\r\n\r\n    state = {\r\n        urls: []\r\n    }\r\n    add = () =>{\r\n        if (this.props.type === \"image\"){\r\n            let arr = this.state.urls;\r\n            arr.push(this.props.url);\r\n            this.setState({urls: arr});\r\n        } else if(this.props.type === \"video\") alert(\"Невозможно сохранить видео\");\r\n        else alert(\"Нет изображения\");\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"container\">\r\n                <div>\r\n                    <button className=\"btn btn-primary\" onClick={this.add}>Сохранить картинку</button>\r\n                </div>\r\n                { this.state.urls.map(function (item, i) {\r\n                    return(\r\n                    <div key={i} className=\"card w-50 text-center marg mt-5\">\r\n                        <div className=\"card-header\">\r\n                            <h3>Instagram</h3>\r\n                        </div>\r\n                        <div className=\"card-img-top mt-2 mb-2 \">\r\n                            <img className=\"img-fluid\" src={item} alt=\"\"/>\r\n                        </div>\r\n                        <div className=\"card-footer\">\r\n\r\n                        </div>\r\n                    </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Insta;","import React from \"react\";\nimport DateComponent from \"./components/DateComponent\";\nimport ImageComponent from \"./components/ImageComponent\";\nimport Insta from \"./components/Insta\";\n\nconst API_KEY = \"sRvngy9nGodZ2nvZHM27ud7shyYsFqh8jngN0GGD\";\n\nclass App extends React.Component {\n\n    state = {\n        url: undefined,\n        type: undefined,\n        date: new Date(),\n        explanation: undefined,\n        title: undefined,\n        outdate: undefined,\n        code: undefined\n    }\n\n\n\n    gettingDate = async (value) =>{\n\n        let options = {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            weekday: 'long',\n\n        };\n\n        this.setState({\n            date: value,\n            outdate: value.toLocaleString(\"ru\", options)\n        })\n    }\n\n    gettingImage = async (e) => {\n        e.preventDefault();\n        const newdate = `${this.state.date.getFullYear()}-${this.state.date.getMonth()+1}-${this.state.date.getDate()}`\n        const api_url = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&date=${newdate}`,{\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n        const data = await api_url.json();\n        console.log(newdate);\n        console.log(data);\n\n        this.setState({\n            url: data.url,\n            error: data.error,\n            type: data.media_type,\n            explanation: data.explanation,\n            title: data.title,\n            code: data.code\n        });\n        if(this.state.code) alert(\"Ошибка! Повторите попытку\");\n        else{\n            sessionStorage.setItem(\"date\", this.state.date);\n            sessionStorage.setItem(\"url\", this.state.url);\n            sessionStorage.setItem(\"type\", this.state.type);\n            sessionStorage.setItem(\"explanation\", this.state.explanation);\n            sessionStorage.setItem(\"title\", this.state.title);\n            sessionStorage.setItem(\"outdate\", this.state.outdate)\n        }\n\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            url: sessionStorage.getItem(\"url\"),\n            type: sessionStorage.getItem(\"type\"),\n            explanation: sessionStorage.getItem(\"explanation\"),\n            title: sessionStorage.getItem(\"title\"),\n            outdate: sessionStorage.getItem(\"outdate\")\n\n        })\n    }\n  render() {\n\n    return (\n        <div>\n            <div id=\"block\" className=\"container\">\n                <div className=\"row text-center align-items-center \">\n                    <div className=\"col-sm-12 col-md-12\">\n                        <div className=\"container marg\">\n                            <div className=\"container text\"><h3>Выбранная дата</h3><h3>{this.state.outdate}</h3></div>\n                            <DateComponent dateMethod={this.gettingDate} imageMethod={this.gettingImage} />\n                        </div>\n                    </div>\n                    <div className=\"col-md-12 mt-2\">\n                            <form onSubmit={this.gettingImage}>\n                                <button className=\"btn btn-lg btn-block btn-primary btn-circle align-content-center marg align-middle\" >Посмотреть</button>\n                            </form>\n                    </div>\n                    <div className=\"col-md-12 marg text\" >\n                        <ImageComponent url={this.state.url} type={this.state.type} explanation={this.state.explanation} title={this.state.title}/>\n                    </div>\n                    <div className=\"col-md-12 marg text\">\n                        <Insta url={this.state.url} type={this.state.type}/>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}